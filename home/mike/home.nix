#          ╔══════════════════════════════════════════════════════════╗
#          ║                         home.nix                         ║
#          ╚══════════════════════════════════════════════════════════╝


# ══ TODO: ═════════════════════════════════════════════════════════════
#
# - [ ] Modularize packages into separate configuration files


# This is a default home.nix generated by the follwing hone-manager command
#
# home-manager init ./

{ config, lib, pkgs, ... }:

{
  # Home Manager needs a bit of information about you and the paths it should
  # manage.
  home.username = lib.mkDefault "mike";
  home.homeDirectory = lib.mkDefault "/home/${config.home.username}";

  # This value determines the Home Manager release that your configuration is
  # compatible with. This helps avoid breakage when a new Home Manager release
  # introduces backwards incompatible changes.
  #
  # You should not change this value, even if you update Home Manager. If you do
  # want to update the value, then make sure to first check the Home Manager
  # release notes.
  home = {
    stateVersion = "24.05";

    packages = with pkgs; [

        # The home.packages option allows you to install Nix packages into your
        # environment.

        # # Adds the 'hello' command to your environment. It prints a friendly
        # # "Hello, world!" when run.
        # pkgs.hello

        # # It is sometimes useful to fine-tune packages, for example, by applying
        # # overrides. You can do that directly here, just don't forget the
        # # parentheses. Maybe you want to install Nerd Fonts with a limited number of
        # # fonts?
        # (pkgs.nerdfonts.override { fonts = [ "FantasqueSansMono" ]; })

        # # You can also create simple shell scripts directly inside your
        # # configuration. For example, this adds a command 'my-hello' to your
        # # environment:
        # (pkgs.writeShellScriptBin "my-hello" ''
        #   echo "Hello, ${config.home.username}!"
        # '')
      # Terminal Emulators
      alacritty # A fast, lightweight terminal emulator

      # Note-taking & Office
      obsidian # A powerful knowledge base that works on local Markdown files
      libreoffice-still # Comprehensive, professional-quality productivity suite, a variant of openoffice.org
      doing

      # Email Clients
      thunderbird # A free and open-source email, newsfeed, chat, and calendaring client

      # Web Browsers
      firefox # A free and open-source web browser

      # Version Control
      gh # GitHub’s official command line tool
      git # The fast distributed version control system
      lazygit # Simple terminal UI for git commands

      # Terminal Multiplexers
      tmux # Terminal multiplexer

      # Media
      plexamp # A music player for Plex Pass users

      # Formatting Tools
      alejandra # A code formatter for Nix

      # Shells
      fish # Friendly interactive shell

      # Command History
      atuin # Replaces your existing shell history

      # Utilities
      bat # A cat clone with syntax highlighting
      ncdu # Disk usage analyzer with an ncurses interface
      plocate # A locate command implementation
      zoxide # A smarter cd command
      bottom # A graphical process/system monitor for the terminal
      python312 # Python programming language
      python312Packages.numpy
      # python3
      neofetch # A command-line system information tool
      nnn # Terminal file manager
      thefuck # Correct your commands
      copyq
      curl
      planify
      cmake
      ninja
      gcc

      # Archives
      zip # Package and compress (archive) files
      xz # Lossless data compression
      unzip # Decompression program for .zip files
      p7zip # Command-line version of 7-Zip

      # Search Utilities
      ripgrep # Recursively searches directories for a regex pattern
      eza # A modern replacement for ‘ls’
      fzf # A command-line fuzzy finder

      # Networking Tools
      nmap # A utility for network discovery and security auditing

      # Miscellaneous
      nixd
      cowsay # Configurable talking cow
      sl
      nyancat
      file # Determines file type
      which # Shows the full path of (shell) commands
      tree # Displays directories as trees (with optional color/HTML output)

      # Nix Related
      nix-output-monitor # Monitor for nix builds

      # Productivity
      hugo # Static site generator
      yazi
      file
      kitty

      nodejs
      nodejs_22
      lua # Lua programming language
      luarocks
      direnv # Environment switcher for the shell
      nix-direnv # direnv integration for nix

      # inputs.zen-browser.packages."${system}".specific # Zen Browser
      marksman

      neovim
      streamrip


      starship # The minimal, blazing-fast, and infinitely customizable prompt for any shell

      rsync # A fast, versatile, remote (and local) file-copying tool
      duplicati # Free backup software to store encrypted backups online
      taskwarrior3 # Taskwarrior is Free and Open Source Software that manages your TODO list from the command line
      spotify
      devenv

      darktable
      gimp
      go
      poetry

      cheat
      tldr
      }

  ];

  # Home Manager is pretty good at managing dotfiles. The primary way to manage
  # plain files is through 'home.file'.
  home.file = {
    # # Building this configuration will create a copy of 'dotfiles/screenrc' in
    # # the Nix store. Activating the configuration will then make '~/.screenrc' a
    # # symlink to the Nix store copy.
    # ".screenrc".source = dotfiles/screenrc;

    # # You can also set the file content immediately.
    # ".gradle/gradle.properties".text = ''
    #   org.gradle.console=verbose
    #   org.gradle.daemon.idletimeout=3600000
    # '';
  };

  # Home Manager can also manage your environment variables through
  # 'home.sessionVariables'. If you don't want to manage your shell through Home
  # Manager then you have to manually source 'hm-session-vars.sh' located at
  # either
  #
  #  ~/.nix-profile/etc/profile.d/hm-session-vars.sh
  #
  # or
  #
  #  ~/.local/state/nix/profiles/profile/etc/profile.d/hm-session-vars.sh
  #
  # or
  #
  #  /etc/profiles/per-user/m3tam3re/etc/profile.d/hm-session-vars.sh
  #
  home.sessionVariables = {
    # EDITOR = "emacs";
  };

  # Let Home Manager install and manage itself.
  programs = {
    # Basic configuration of git
    git = {
      enable = true;
      userName = "mike";
      userEmail = "mikehall@mikehall94.com";
      extraConfig = {
        init.defaultBranch = "main";
        safe.directory = "home/mike/dotfiles";
      };
    };

    vscode = {
      enable = true;
      extensions = with pkgs.vscode-extensions; [
        github.copilot
      ];
    };


    direnv = {
      enable = true;
      nix-direnv.enable = true;
      # enableFishIntegration = true;
    };

    # Enable home-manager and neovim
    # neovim = {
    #     enable = true;
    #     package = nixpkgs-unstable.neovim;
    # };
    home-manager.enable = true;

    # fish.enable = true;
  };
  # Nicely reload system units when changing configs
  systemd.user.startServices = "sd-switch";
}
#
# # This is your home-manager configuration file
# # Use this to configure your home environment (it replaces ~/.config/nixpkgs/home.nix)
# { inputs
# , lib
# , config
# , pkgs
# , zen-browser
# , ...
# }: {
#   # You can import other home-manager modules here
#   imports = [
#     # If you want to use home-manager modules from other flakes (such as nix-colors):
#     # inputs.nix-colors.homeManagerModule
#
#     # You can also split up your configuration and import pieces of it here:
#     # ./nvim.nix
#   ];
#
#   nixpkgs = {
#     # You can add overlays here
#     overlays = [
#       # If you want to use overlays exported from other flakes:
#       # neovim-nightly-overlay.overlays.default
#
#       # Or define it inline, for example:
#       # (final: prev: {
#       #   hi = final.hello.overrideAttrs (oldAttrs: {
#       #     patches = [ ./change-hello-to-hi.patch ];
#       #   });
#       # })
#     ];
#     # Configure your nixpkgs instance
#     config = {
#       # Disable if you don't want unfree packages
#       allowUnfree = true;
#       # Workaround for https://github.com/nix-community/home-manager/issues/2942
#       allowUnfreePredicate = _: true;
#     };
#   };
#
#   # TODO: Set your username
#   home = {
#     username = "mike";
#     homeDirectory = "/home/mike";
#
#     packages = with pkgs; [
#
#     ];
#   };
#
#   # Add stuff for your user as you see fit:
#   # programs.neovim.enable = true;
#   # home.packages = with pkgs; [ steam ];
#
#   # Programs
#
#
#   # https://nixos.wiki/wiki/FAQ/When_do_I_update_stateVersion
#   home.stateVersion = "24.05";
# }
#
